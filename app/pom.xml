<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.intuit.paved-road.intcollabs-notification</groupId>
	<artifactId>scheduler-app</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<!-- name>scheduler</name -->
	<!-- description>Demo project for JSK-based Microservice</description -->

	<url>https://github.intuit.com/intcollabsnotification/scheduler.git</url>
	<organization>
		<name>Intuit, Inc. :: intcollabsnotification :: scheduler</name>
		<url>https://github.intuit.com/intcollabsnotification</url>
	</organization>

<!--	<name>Service for scheduling</name>-->

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<spring-boot-maven-plugin.version>2.5.12</spring-boot-maven-plugin.version>
		<java.version>11</java.version>
		<jskbom.version>2.11.1</jskbom.version>
		<v4schema.version />
		<openapi.version>1.3.9</openapi.version>
		<start-class>com.intuit.pavedroad.intcollabsnotification.schedulerapp.SchedulerApplication</start-class>
		<jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>
		<maven-cucumber-version>3.8.0</maven-cucumber-version>	<!-- TODO: update - 3.8.0 is from 2017 -->
		<maven-compiler.version>3.6.0</maven-compiler.version>
		<maven-release-plugin.version>2.5.3</maven-release-plugin.version>
		<maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>
		<maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
		<maven-surefire-report-plugin.version>2.22.2</maven-surefire-report-plugin.version>
		<surefireArgLine />
		<karate.version>0.9.5</karate.version>

		<project.testresult.directory>${project.build.directory}/test-results</project.testresult.directory>
		<central.repo>https://artifact.intuit.com/artifactory/maven-proxy</central.repo>
		<!-- Perf Test Dependencies -->
		<gatling-maven-plugin.version>3.1.2</gatling-maven-plugin.version>
	</properties>

	<dependencies>

		<dependency>
			<groupId>com.intuit.platform.jsk</groupId>
			<artifactId>jsk-spring-boot-starter-mvc</artifactId>
		</dependency>

		<dependency>
			<groupId>com.intuit.platform.jsk.spring</groupId>
			<artifactId>jsk-spring-boot-starter-k8s-metrics</artifactId>
		</dependency>

		<dependency>
			<groupId>com.intuit.paved-road.intcollabs-notification</groupId>
			<artifactId>spring-example-core</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>5.3.19</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>2.6.7</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>	 <!-- Process bootstrap files; see API-1725 -->
			<exclusions>
				<!-- Intuit requires use of FIPS 140-2 compliant bc-fips rather than non-compliant bcprov-jdk15on
				     and bcpkix-jdk15on. You will need to add this same "exclusions" section to other dependencies
				     if they import those.  See
				        * the update(s) to https://stackoverflow.intuit.com/questions/10776/10777#10777
				        * and https://github.intuit.com/services-java/jsk-spring-security#fips-140-2-compliance
				-->
				<exclusion>
					<groupId>org.bouncycastle</groupId>
					<artifactId>bcpkix-jdk15on</artifactId>	<!-- replaced by bcpkix-fips, below -->
				</exclusion>
				<exclusion>
					<groupId>org.bouncycastle</groupId>
					<artifactId>bcprov-jdk15on</artifactId> <!-- replaced by bc-fips, below -->
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bc-fips</artifactId>      <!-- replaces bcprov-jdk15on, which must be excluded from all dependencies that import it -->
		</dependency>
		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcpkix-fips</artifactId>  <!-- replaces bcpkix-jdk15on, which must be excluded from all dependencies that import it -->
		</dependency>

		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-ui</artifactId>
			<version>${openapi.version}</version>
		</dependency>

		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>


		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.junit.vintage</groupId>
			<artifactId>junit-vintage-engine</artifactId>	<!-- For JUnit4 use: dropped from spring-boot-starter-test as of Spring Boot 2.4.0 -->
			<scope>test</scope>
			<!-- see https://wiki.intuit.com/display/CTODevSP/Spring+Boot+2.4+Migration+Notes -->
			<exclusions>
				<exclusion>
					<groupId>org.hamcrest</groupId>
					<artifactId>hamcrest-core</artifactId>	<!-- exclusion recommended for SB 2.4.0 by https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.4-Release-Notes#junit-5s-vintage-engine-removed-from-spring-boot-starter-test -->
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.intuit.karate</groupId>
			<artifactId>karate-apache</artifactId>
			<version>${karate.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.intuit.karate</groupId>
			<artifactId>karate-junit4</artifactId>
			<version>${karate.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.intuit.karate</groupId>
			<artifactId>karate-gatling</artifactId>
			<version>${karate.version}</version>
			<scope>test</scope>
			<exclusions>
				<!-- Intuit requires use of FIPS 140-2 compliant bc-fips rather than non-compliant bcprov-jdk15on
				     and bcpkix-jdk15on. You will need to add this same "exclusions" section to other dependencies
				     if they import those.  See
				        * the update(s) to https://stackoverflow.intuit.com/questions/10776/10777#10777
				        * and https://github.intuit.com/services-java/jsk-spring-security#fips-140-2-compliance
				-->
				<exclusion>
					<groupId>org.bouncycastle</groupId>
					<artifactId>bcpkix-jdk15on</artifactId>	<!-- replaced by bcpkix-fips, below -->
				</exclusion>
				<exclusion>
					<groupId>org.bouncycastle</groupId>
					<artifactId>bcprov-jdk15on</artifactId> <!-- replaced by bc-fips, below -->
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>net.masterthought</groupId>
			<artifactId>maven-cucumber-reporting</artifactId>
			<version>${maven-cucumber-version}</version>
			<!-- Note that maven-cucumber-reporting 3.8.0 (from June 2017), via cucumber-reporting, inappropriately
			     brings in log4j-core as a transitive dependency. This appears to be fixed at least as of 5.2.6.
			     The version of log4j-core _should be_ managed by jsk-bom. -->
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.intuit.ctg.devgru.test</groupId>
			<artifactId>api-test-starter</artifactId>
			<version>1.0.4</version>
			<type>test-jar</type>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.sonarsource.java</groupId>
			<artifactId>sonar-jacoco-listeners</artifactId>
			<version>3.8</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>com.intuit.ctg.tools</groupId>
			<artifactId>perf-utils</artifactId>
			<version>1.0.3</version>
			<scope>test</scope>
		</dependency>
		

        <dependency>
            <groupId>com.intuit.platform.jsk</groupId>
            <artifactId>jsk-mesh-autoconfig</artifactId>
        </dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.intuit.platform.jsk</groupId>
				<artifactId>jsk-bom</artifactId>
				<version>${jskbom.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>


	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler.version}</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot-maven-plugin.version}</version>
				<executions>
					<execution>
						<id>repackage</id>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<classifier>exec</classifier>
							<!-- 2022-01-10: SPRING_CLOUD_BOOTSTRAP_ENABLED is longer _needed_ as we have added
                                 spring-cloud-starter-bootstrap, but users may want to consider setting
                                 spring.config.use-legacy-processing a.k.a. SPRING_CONFIG_USELEGACYPROCESSING to true, per
                                 https://spring.io/blog/2020/08/14/config-file-processing-in-spring-boot-2-4#using-legacy-processing
                                 https://wiki.intuit.com/display/CTODevSP/Spring+Boot+2.4+Migration+Notes -->
						</configuration>
					</execution>

					<execution>
						<phase>install</phase>
						<goals>
							<goal>repackage</goal>
							<goal>build-info</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<executable>true</executable>
					<finalName>${project.artifactId}</finalName>
					<includeSystemScope>true</includeSystemScope>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-maven-plugin.version}</version>
				<configuration>
					<dataFile>${project.testresult.directory}/coverage/jacoco/jacoco.exec</dataFile>
					<outputDirectory>${project.testresult.directory}/coverage/jacoco</outputDirectory>
					<!-- Sets the path to the file which contains the execution data. -->
					<destFile>${project.testresult.directory}/coverage/jacoco/jacoco.exec</destFile>
				</configuration>
				<executions>
					<execution>
						<id>pre-unit-tests</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<!-- Ensures that the code coverage report for unit tests is created 
						after unit tests have been run -->
					<execution>
						<id>post-unit-test</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>default-check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>BUNDLE</element>
									<limits>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.85</minimum>
										</limit>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.50</minimum>
										</limit>
										<limit>
											<counter>CLASS</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.50</minimum>
										</limit>
										<limit>
											<counter>METHOD</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.50</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
				<configuration>
					<includes>
						<include>**/Test*.java</include>
						<include>**/*Test.java</include>
						<include>**/*Tests.java</include>
						<include>**/*TestCase.java</include>
					</includes>
					<useFile>true</useFile>
					<!-- March 2021 - during transition period, enable legacy mode for Spring 
						Boot 2.4 See https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Config-Data-Migration-Guide#legacy-mode 
						and https://wiki.intuit.com/display/CTODevSP/Spring+Boot+2.4+Migration+Notes 
						. And we also need to set the system property spring.cloud.bootstrap.enabled 
						(or equivalent environment variable) to have Spring Boot 2.4 (Spring Cloud 
						2020) process bootstrap files! See above and https://docs.spring.io/spring-cloud-config/docs/3.0.0/reference/html/#config-data-import 
						and http://maven.apache.org/surefire/maven-surefire-plugin/faq.html#late-property-evaluation -->
					<argLine>@{argLine} @{surefireArgLine}
						-Dspring.cloud.bootstrap.enabled=true
						-Dspring.config.use-legacy-processing=true</argLine>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
<executions><execution><id>default-deploy</id><phase>never</phase></execution></executions>
				<version>${maven-deploy-plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven-release-plugin.version}</version>
				<configuration>
					<preparationGoals>clean</preparationGoals>
					<arguments>-s settings.xml</arguments>
					<goals>clean deploy</goals>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<!-- Start Unit testing -->
		<profile>
			<id>unit</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<testResources>
					<testResource>
						<directory>src/test/java</directory>
					</testResource>
				</testResources>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${maven-surefire-plugin.version}</version>
						<configuration>
							<excludes>
								<exclude>karate/KarateTestBase.java</exclude>
								<exclude>karate/ApiMockRunner.java</exclude>
								<exclude>karate/KarateTestParallel.java</exclude>
							</excludes>
							<properties>
								<property>
									<name>listener</name>
									<value>org.sonar.java.jacoco.JUnitListener</value>
								</property>
							</properties>
							<!-- March 2021 - during transition period, enable legacy mode for 
								Spring Boot 2.4 See https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Config-Data-Migration-Guide#legacy-mode 
								and https://wiki.intuit.com/display/CTODevSP/Spring+Boot+2.4+Migration+Notes 
								. And we also need to set the system property spring.cloud.bootstrap.enabled 
								(or equivalent environment variable) to have Spring Boot 2.4 (Spring Cloud 
								2020) process bootstrap files! See above and https://docs.spring.io/spring-cloud-config/docs/3.0.0/reference/html/#config-data-import 
								and http://maven.apache.org/surefire/maven-surefire-plugin/faq.html#late-property-evaluation -->
							<argLine>@{argLine} @{surefireArgLine}
								-Dspring.cloud.bootstrap.enabled=true
								-Dspring.config.use-legacy-processing=true</argLine>
						</configuration>
					</plugin>
				</plugins>
			</build>
			<!-- End of Unit Testing -->
		</profile>
		<!-- Start Karate testing -->
		<profile>
			<id>karate</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<testResources>
					<testResource>
						<directory>src/test/java</directory>
						<excludes>
							<exclude>**/*.java</exclude>
						</excludes>
					</testResource>
				</testResources>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${maven-surefire-plugin.version}</version>
						<configuration>
							<includes>
								<include>karate/KarateTestParallel.java</include>
							</includes>
							<properties>
								<property>
									<name>listener</name>
									<value>org.sonar.java.jacoco.JUnitListener</value>
								</property>
							</properties>
							<!-- March 2021 - during transition period, enable legacy mode for 
								Spring Boot 2.4 See https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Config-Data-Migration-Guide#legacy-mode 
								and https://wiki.intuit.com/display/CTODevSP/Spring+Boot+2.4+Migration+Notes 
								. And we also need to set the system property spring.cloud.bootstrap.enabled 
								(or equivalent environment variable) to have Spring Boot 2.4 (Spring Cloud 
								2020) process bootstrap files! See above and https://docs.spring.io/spring-cloud-config/docs/3.0.0/reference/html/#config-data-import 
								and http://maven.apache.org/surefire/maven-surefire-plugin/faq.html#late-property-evaluation -->
							<argLine>@{surefireArgLine} -Dspring.cloud.bootstrap.enabled=true
								-Dspring.config.use-legacy-processing=true</argLine>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>default-prepare-agent</id>
								<configuration>
									<destFile>${project.build.directory}/jacoco-it/jacoco-it.exec</destFile>
								</configuration>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>default-report</id>
								<phase>test</phase>
								<configuration>
									<dataFile>${project.build.directory}/jacoco-it/jacoco-it.exec</dataFile>
									<outputDirectory>${project.build.directory}/jacoco-it/</outputDirectory>
								</configuration>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
							<execution>
								<id>default-check</id>
								<goals>
									<goal>check</goal>
								</goals>
								<configuration>
									<skip>true</skip>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<!-- End of Karate Testing -->
		</profile>
		<!-- Start Karate Mock testing -->
		<profile>
			<id>mock</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<testResources>
					<testResource>
						<directory>src/test/java</directory>
						<excludes>
							<exclude>**/*.java</exclude>
						</excludes>
					</testResource>
				</testResources>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>${maven-surefire-plugin.version}</version>
						<configuration>
							<includes>
								<include>karate/ApiMockRunner.java</include>
							</includes>
							<properties>
								<property>
									<name>listener</name>
									<value>org.sonar.java.jacoco.JUnitListener</value>
								</property>
							</properties>
							<!-- March 2021 - during transition period, enable legacy mode for 
								Spring Boot 2.4 See https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-Config-Data-Migration-Guide#legacy-mode 
								and https://wiki.intuit.com/display/CTODevSP/Spring+Boot+2.4+Migration+Notes 
								. And we also need to set the system property spring.cloud.bootstrap.enabled 
								(or equivalent environment variable) to have Spring Boot 2.4 (Spring Cloud 
								2020) process bootstrap files! See above and https://docs.spring.io/spring-cloud-config/docs/3.0.0/reference/html/#config-data-import 
								and http://maven.apache.org/surefire/maven-surefire-plugin/faq.html#late-property-evaluation -->
							<argLine>@{surefireArgLine} -Dspring.cloud.bootstrap.enabled=true
								-Dspring.config.use-legacy-processing=true</argLine>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco-maven-plugin.version}</version>
						<executions>
							<execution>
								<id>default-prepare-agent</id>
								<configuration>
									<destFile>${project.build.directory}/jacoco-it/jacoco-it.exec</destFile>
								</configuration>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
							</execution>
							<execution>
								<id>default-report</id>
								<phase>test</phase>
								<configuration>
									<dataFile>${project.build.directory}/jacoco-it/jacoco-it.exec</dataFile>
									<outputDirectory>${project.build.directory}/jacoco-it/</outputDirectory>
								</configuration>
								<goals>
									<goal>report</goal>
								</goals>
							</execution>
							<execution>
								<id>default-check</id>
								<goals>
									<goal>check</goal>
								</goals>
								<configuration>
									<skip>true</skip>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<!-- End of Karate Testing -->
		</profile>
		<!-- Start of Perf Testing -->
		<profile>
			<id>perf</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<testResources>
					<testResource>
						<directory>src/test/java</directory>
						<excludes>
							<exclude>**/*.java</exclude>
						</excludes>
					</testResource>
				</testResources>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>${maven-compiler.version}</version>
						<configuration>
							<encoding>UTF-8</encoding>
							<source>${java.version}</source>
							<target>${java.version}</target>
							<compilerArgument>-Werror</compilerArgument>
						</configuration>
					</plugin>
					<plugin>
						<groupId>io.gatling</groupId>
						<artifactId>gatling-maven-plugin</artifactId>
						<version>${gatling-maven-plugin.version}</version>
						<configuration>
							<simulationsFolder>src/test/scala/simulations</simulationsFolder>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!-- End of Perf Testing -->
		<profile>
		<id>karate-remote</id>
		<activation>
			<activeByDefault>false</activeByDefault>
		</activation>
		<build>
			<testResources>
				<testResource>
					<directory>src/test/java</directory>
				</testResource>
				<testResource>
					<directory>src/test/resources</directory>
				</testResource>
			</testResources>
			<plugins>
				<plugin>
					<groupId>com.intuit.ctg.qe</groupId>
					<artifactId>jacoco-service-maven-plugin</artifactId>
					<version>1.0.5</version>
					<configuration>
						<!-- Jacoco agent is only attached in the QAL environment.
                            Corresponding Jacoco service is enabled in the QAL namespace for collecting the jacoco exec file.
                            Changing this to any other environment would require deployment changes-->
						<hostname>${jacocoServiceEndpoint}</hostname>
						<hostnames>
							<!-- The list of hostname(s) you would like to dump the JaCoCo exec data from -->
							<hostname>${kubernetesServiceName}</hostname>
						</hostnames>
						<reset>true</reset> <!-- Flag to reset or not -->
					</configuration>
					<executions>
						<execution>
							<id>run</id>
							<goals>
								<goal>postrequest</goal> <!-- Async post to get the request -->
								<goal>getstatus</goal> <!-- Blocking call to wait until the request is complete -->
								<goal>getrequest
								</goal> <!-- Download the JaCoCo Exec file so that we can generate the report -->
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-maven-plugin.version}</version>
					<configuration>
						<title>${project.name} for ${project.groupId}:${project.artifactId}:${project.version}
						</title>
						<footer>&copy;2017 Intuit, Inc. Generated ${maven.build.timestamp}</footer>
						<includes>
							<include>com/intuit/**/*</include> <!-- Only include Intuit packages in the report. -->
						</includes>
						<dataFile>${basedir}/target/jacoco-it.exec</dataFile>
					</configuration>
					<executions>
						<execution>
							<id>jacoco-report-integration-test</id>
							<phase>verify</phase>
							<goals>
								<goal>report-integration</goal>
							</goals>
						</execution>
						<execution>
					    		<id>default-check</id>
				                        <goals>
	    							<goal>check</goal>
							</goals>
							<configuration>
								<skip>true</skip>
							</configuration>
					  	</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven-surefire-plugin.version}</version>
					<configuration>
						<includes>
							<!--<include>karate/KarateTestBase.java</include>-->
							<include>karate/KarateTestParallel.java</include>
						</includes>
						<properties>
							<property>
								<name>listener</name>
								<value>org.sonar.java.jacoco.JUnitListener</value>
							</property>
						</properties>
					</configuration>
				</plugin>
			</plugins>
		</build>
		</profile>
</profiles>

	<!-- SCM configurations to allow maven updates to source control. E.g.: 
		org.apache.maven.plugins:maven-release-plugin can create and update release 
		tags to your git repo -->
	<scm>
		<connection>scm:git:https://github.intuit.com/intcollabsnotification/scheduler.git</connection>
		<developerConnection>scm:git:https://github.intuit.com/intcollabsnotification/scheduler.git</developerConnection>
		<url>https://github.intuit.com/intcollabsnotification/scheduler</url>
		<tag>HEAD</tag>
	</scm>

	<repositories>
		<repository>
			<id>central-repo</id>
			<url>${central.repo}</url>
			<name>Intuit Nexus Cache</name>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>central-plugin-repo</id>
			<url>${central.repo}</url>
			<name>Intuit Nexus Cache (plugins)</name>
		</pluginRepository>
	</pluginRepositories>

	<distributionManagement>
		<snapshotRepository>
			<uniqueVersion>false</uniqueVersion>
			<id>scm.dev.snap.repo</id>
			<name>SNAPSHOT REPO</name>
			<url>https://artifact.intuit.com/artifactory/Intuit.Snapshots</url>
			<layout>default</layout>
		</snapshotRepository>
		<repository>
			<id>scm.int.rel.repo</id>
			<name>RELEASE REPO</name>
			<url>https://artifact.intuit.com/artifactory/Intuit.Releases</url>
			<layout>default</layout>
		</repository>
	</distributionManagement>
</project>
